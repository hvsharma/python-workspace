Implementation in the program is done via Adjacency Matrix, constructed with help of a 2-D List

[References used: Algorithm Design and Applications - Michael T. Goodrich & Roberto Tamassia, 
Section 13.1.3 - Data Structures for Representing Graphs]

~~~~~~~~~~~~~~~~~~~~~
displayTransportHub()
~~~~~~~~~~~~~~~~~~~~~

Since we are looping twice (nested) in the function to traverse adjacency matrix, and both loops run completely...

Complexity = O(n^2)

Where n = number of nodes = number of cities


~~~~~~~~~~~~~~~~~~~~~~~~
displayConnectedCities()
~~~~~~~~~~~~~~~~~~~~~~~~

Since we are looping twice (nested) in the function to traverse adjacency matrix, and both loops run completely...

Complexity = O(n^2)

Where n = number of nodes = number of cities



~~~~~~~~~~~~~~~~~~~~
displayDirectTrain()
~~~~~~~~~~~~~~~~~~~~

[References used: https://www.geeksforgeeks.org/internal-working-of-set-in-python/]

Since findTrainBetweenAdjacentCities uses direct reference via city names, Complexity = O(1)

If cities are not adjacent but they are still associated with a single train, we are using set.intersection()
to find common trains between two stations from Adjacency Matrix.

Complexity of set.intersection() is given by: O(min(len(s1), len(s2))
Where, 
len(s1) = Length of Set 1
len(s2) = Length of Set 2

Since,   O(min(len(s1), len(s2)) > O(1)

Therefore the complexity would be :

Complexity = MAXIMUM [O(min(len(s1), len(s2)), O(1)] = O(min(len(s1), len(s2))


~~~~~~~~~~~~~~~~~~~~~~
findServiceAvailable()
~~~~~~~~~~~~~~~~~~~~~~

[References used: Algorithm Design and Applications - Michael T. Goodrich & Roberto Tamassia, 
Section 13.1.3 - Data Structures for Representing Graphs - Section DFS Analysis]

Since we are using Depth First Search to find the paths:

Complexity = O(n + m)

Where, 
n = number of Vertices = number of cities, 
m = number of Edges = number of trains